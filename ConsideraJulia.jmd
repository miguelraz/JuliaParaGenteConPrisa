# Julia para Gente con Prisa
## C√≥mputo de Alto Rendimiento para t√≠
por Miguel Raz Guzm√°n (@miguelraz)
Gracias a MEXSIAM 2023

## Metas del Curso
- Que sepas si Julia es para t√≠
- Que puedas tener una intuici√≥n de c√≥mo compartir tu c√≥digo
- Que puedas tener intuiciones b√°sicas de por qu√© el c√≥digo puede ser lento 
- Que reconozcas al menos 5 tipos de optimizaciones b√°sicas de compiladores
- Que puedas entender las mejoras de ~100 lineas de c√≥digo en Julia (proyecto final)
- Que puedas encontrar e instalar paqueter√≠as que te puedan ayudar a resolver problemas reales
- Que puedas describir patrones algor√≠tmicos b√°sicos para problemas resoluci√≥n paralela 

## Julia ... s√≠ de Ju + Py + R => JuPyteR o.0"""

Julia tiene muchas cosas que ya conocen:
- din√°mico, pero ~tan r√°pido como C
- basado en el paradigma de despacho m√∫ltiple (cercano a OOP)
- altamente interactivo
- manejo de memoria automatizado (tiene un GC)
- homoic√≥nico => metaprogramaci√≥n
- Empez√≥ por hartazgo a MATLAB y otros, pero ha robado lo bueno de los dem√°s
- c√≥digo libre, todo el desarrollo pasa ahorita en GitHub
- disponible aqu√≠ [para descargar (usen 1.6!)](https://julialang.org/downloads/)
- joven (circa 2012ish, v1.0 en 2018)
- tiene un manejador de paquetes muuuuy pulido (estilo cargo!)
- te encantan los REPLs e iterar tus dise√±os r√°pidamente
- test driven development (TDD) incluido con la paqueter√≠a base
- C√≥digo de Conducta [internacionalmente reconocido](https://julialang.org/community/standards/) para evitar üêª

üåê = "Hola XalapaCode! üëã"

Esta pl√°tica con suerte y te va a gustar si
- te gusta la programaci√≥n funcional estilo Lisp pero no la lentitud üí©
- te encanta prototipar en Python pero deploy en C++ üôé
- te gusta el sentimiento de "empoderamiento" que te da el mundo de Rust
- est√°s buscando dejar todos los dolores de cabeza de `pip install ya-m√°tame`
- quieres la estad√≠stica f√°cil de R pero da mucho meyo meterse a los lares del compilador
- si quieres que tus loops no sean lent√≠simos üê¢

```julia
xs = 1:100

Œ±‚ÇÅ = [i for i in 1:10 if i % 2 == 0] # Haskell y Python, alguien?

Œ≤ = 3
```

Esta pl√°tica es para contar
- las ventajas de Julia
- las desventajas de Julia
- en qu√© es muy, muy √∫til
- para qu√© no lo es tanto

No vengo a evangelizar o a decir que deber√≠an usar Julia, o que Julia es la respuesta a todo. El chiste es exponer las razones por las cu√°les vale la pena considerar a Julia como una alternativa a su workflow si viven con el problema de los 2 lenguajes.
"""

# ¬øCu√°l es el problema de los 2 lenguajes?
Es un problema muy conocido por cualquier que hace bastante c√≥mputo interactivo y de producci√≥n.

[Tienes 1 lenguaje](https://www.quora.com/What-is-the-2-language-problem-in-data-science?share=1) para prototipar (digamos Python, un lenguaje din√°mico) usado por un grupo de gente (tus data scientists) y 1 lenguaje para producci√≥n (digamos C++, compilado) que usan tus devs de backend.

Todos son felices hasta que un d√≠a los requisitos cambian y tu separaci√≥n de problemas ya no es tan f√°cil y un grupo tiene que hablar con el otro y acabas reimplementando todo porque tu c√≥digo no es componible. Aunado a eso, hay una separac√≠on de tus equipos, pues ni siquiera hablan el mismo lenguaje por las distintas restricciones.

### Ok, y si me quiero unir al culto de Julia? ¬øReescribo todo o qu√©?

¬°No es necesario! [La interoperabilidad es lo de hoy, no](https://www.youtube.com/watch?v=PsjANO10KgM) hay porque dejar de usar herramientas o lenguajes que ya sirven.

### Demo interop

### ¬°Oh wow! ¬°Esa terminal de Julia se ve s√∫per chula!

Clar√≠n clarinetes, por eso mismo hice un tutorial para aprender todos los truquitos. La [liga aqu√≠ merito](https://www.youtube.com/watch?v=EkgCENBFrAY)

### ¬øC√≥mo es distinto Julia?

"M√©tele Numpy y ya - no veo el gran problema..."

1. Pierdes algoritmos gen√©ricos
2. Si no juegas dentro del arenero de Numpy, dios te ampare
3. Otra vez tienes la divisi√≥n entre los magos que saben las entra√±as de C de Numpy y los usarios...

Julia es distinto porque
1. Usa un JIT para optimizar el c√≥digo en run-time
2. usa un algoritmo de subtipado para saber los tipos de los argumentos
3. cachear los resultados para generar c√≥digo √≥ptimo la primera vez

### Demo

1. Primera vez es lento,
2. Segunda vez ‚è©

```julia
module Demo
			# Esto ya no es Python..
		
		abstract type AmfibioAbstracto end
		
		struct Sapo <: AmfibioAbstracto
		end
		
		struct Rana <: AmfibioAbstracto
		end
		
		pedrada(::AmfibioAbstracto) = "Ouch"
		
		canta(x::Sapo) = "Ribbit"
		canta(x::Rana) = "Burp"

        export Sapo, Rana
        export pedrada, canta
end

using Demo

rana = Rana()

sapo = Sapo()

pedrada(rana)

pedrada(sapo)
```

Aqu√≠ es donde yo digo que Julia es capaz de resolver el [problema de expresi√≥n](https://en.wikipedia.org/wiki/Expression_problem):

> The expression problem is a new name for an old problem.[2][3] The goal is to define a datatype by cases, where one can add new cases to the datatype and new functions over the datatype, without recompiling existing code, and while retaining static type safety (e.g., no casts).

Como se cubre s√∫per bien en [esta pl√°tica de Stefan Karpinski, co-creador de Julia)](https://www.youtube.com/watch?v=kc9HwsxE1OY&t=346s)
1. En los lenguajes OOP, es f√°cil agregar nuevos tipos/clases a los que les aplican operadores ya existentes, pero dif√≠cil definier nuevas operaciones a tipos ya existentes
2. En los lenguajes funcionales, es f√°cil definir nueavas operaciones a tipos ya existentes, pero dif√≠cil definir nuevos tipos a los que les apliquen m√©todos ya existentes.

# Sin embargo en Julia puedo hacer esto
```julia
struct Renacuajo <: AmfibioAbstracto # Esto cuesta en C++ 
end

canta(x::Renacuajo) = "Mimimimimi" # Esto cuesta en Lisp/Haskell

canta(sapo)

canta(rana)

a = canta(Sapo())

b = canta(Rana())

c = canta(Renacuajo())

# Pero ya tengo esto de a gratis, pues Renacuajo <: Amfibio
pedrada(Renacuajo())

```

### En Julia no existen los problemas de identidad, o de Rect√°ngulo/Cuadrado, porque los operadores no le pertenecen a nadie

3. `foo(2) vs foo(x::Rana, y::Sapo) = ...`

N.B: Julia no fue el primer lenguaje en tener despacho m√∫ltiple. Viene desde Lisp en los 80s, y Dylan lo implement√≥, pero no de una manera f√°cil, reusable, y r√°pida para que se adoptara en todo su ecosistema. Es dif√≠cil pensarlo sin JITs, que son algo recientes.

### ¬°Esto no es nuevo! Pero s√≠ choca con OOP...

1. 1/2 + 1/2
2. .5 + .5
3. .5 + 1/2

<!-- +(x::Rana, y::Sapo) = "lol" -->

```julia
function misuma(xs)
	res = 0
	for i in xs
		res += i
	end
	res
end

misuma(xs)

# pueden sacar el ensamblador en Python? üëì
@code_native debuginfo=:none misuma(xs)

1//2 + 1//2

.5 + .5

.5 + 1//2

x = Rana()

y = Sapo()

x + y

f(x) = x^2

map(f, ["a", 1, 3.0])

findfirst(<(0), [1, 2, 3, 4, -5, -8])

# Demo de hamming?

```

### Entonces, ¬ød√≥nde NO vale la pena Julia?

HOY:
1. Hard real time - puedes apagar el GC para ciertas actividades, pero si eres hiper-sensible a microlatencias probablemente no es lo mejor.
2. Sistemas embebidos - es posible apagar el JIT, pero no ha sido el enfoque de la comunidad
3. Quieres poder copy/pastear d√©cadas de resultados en Stack Overflow y que todo funcione "out of the box". Julia tiene muchas veces mejores herramientas que otros ecosistemas, pero hay que familiarizarse eso no es opci√≥n para todo.
4. Microservicios - empezar y apagar Julia puede doler si no conoces el sistema. Pensar que es "otro Python/R" te va a doler, y hay que invertir algo de tiempo en saber la interacci√≥n del JIT y el subtipado.

### ¬øD√≥nde vale la pena clavarse m√°s?

0. Leer el manual, y de perdis los ["Performance Tips"](https://docs.julialang.org/en/v1/manual/performance-tips/)
1. [Checa la liga en julialang.org/learning](https://julialang.org/learning/)
2. ‚òé con gente en el [Slack/Zulip](https://julialang.org/slack/)
3. ¬øüé• Videos? [las charlas de JuliaCon en Youtube son lo mejor](https://www.youtube.com/watch?v=kc9HwsxE1OY&t=346s)
4. ¬øüìö Cursos universitarios? [Computational Thinking de MIT](https://www.youtube.com/watch?v=vxjRWtWoD_w&list=PLP8iPy9hna6Q2Kr16aWPOKE0dz9OnsnIJ)
5. ¬øY en espa√±ol para la üé∫ üé∑ üé∏? [El libro de "Intro A Julia"](https://introajulia.org/) empieza desde 0
6. Dudas en [Discourse](https://discourse.julialang.org/) para discusiones m√°s a gusto (porque luego Stack Overflow es muy escueto)

Sobra, pero sobra...

0. Despacho m√∫ltiple
1. Paralelismo estilo fork-join
2. GPUs, TPUs, Deep Learning
3. Manejo de paquetes
4. Deploys con BinaryBuilder
5. Optimizaci√≥n
6. T√©cnicas del Garbage Collector

Y falta el ecosistema de DifferentialEquations.jl, Graphs.jl, JuMP.jl..